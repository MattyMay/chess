/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chess;

import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;

import javax.imageio.ImageIO;
import javax.swing.*;


/**
 *
 * @author mattm
 */
public class ChessJFrame extends javax.swing.JFrame implements ActionListener {

    static HashMap<String, ImageIcon> imgs;

    MyUserInterface myUserInterface;
    private final int panelLength = 700;
    private final int squareLength = this.panelLength/8;

    /**
     * Creates new form ChessGUI
     */
    public ChessJFrame() {
        imgs = new HashMap<>();
        loadImages();
        initComponents();
        this.resignButton.addActionListener(this);
    }
    
    public void setMyUserInterface(MyUserInterface myUserInterface) {
        this.myUserInterface = myUserInterface;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        infoPanel = new javax.swing.JPanel();
        dialogue = new javax.swing.JTextField();
        ipInfo = new javax.swing.JTextField();
        resignButton = new javax.swing.JButton();
        boardPanel = new MyBoardPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(700, 700));
        setResizable(false);

        infoPanel.setBackground(new java.awt.Color(0, 0, 0));
        infoPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));
        infoPanel.setForeground(new java.awt.Color(255, 255, 255));
        infoPanel.setMaximumSize(new java.awt.Dimension(700, 100));
        infoPanel.setPreferredSize(new java.awt.Dimension(700, 100));

        dialogue.setEditable(false);
        dialogue.setBackground(new java.awt.Color(0, 0, 0));
        dialogue.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        dialogue.setForeground(new java.awt.Color(255, 255, 255));
        dialogue.setText("jTextField1");
        dialogue.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                dialogueActionPerformed(evt);
            }
        });

        ipInfo.setEditable(false);
        ipInfo.setBackground(new java.awt.Color(0, 0, 0));
        ipInfo.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        ipInfo.setForeground(new java.awt.Color(255, 255, 255));
        ipInfo.setText("jTextField2");
        ipInfo.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                ipInfoActionPerformed(evt);
            }
        });

        resignButton.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        resignButton.setText("Resign");

        javax.swing.GroupLayout infoPanelLayout = new javax.swing.GroupLayout(infoPanel);
        infoPanel.setLayout(infoPanelLayout);
        infoPanelLayout.setHorizontalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ipInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 526, Short.MAX_VALUE)
                    .addComponent(dialogue))
                .addGap(18, 18, 18)
                .addComponent(resignButton, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );
        infoPanelLayout.setVerticalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ipInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dialogue, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(resignButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 14, Short.MAX_VALUE))
        );

        getContentPane().add(infoPanel, java.awt.BorderLayout.PAGE_START);

        boardPanel.setBackground(new java.awt.Color(255, 255, 255));
        boardPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));
        boardPanel.setPreferredSize(new java.awt.Dimension(700, 700));
        
        getContentPane().add(boardPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>                        

    private void dialogueActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
    }                                        

    private void ipInfoActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
    }                                      
    
    protected MyBoardPanel getBoardPanel() {
        return this.boardPanel;
    }
    
    protected void setDialogue(String dialogue) {
        this.dialogue.setText(dialogue);
    }
    protected void setIPInfo(String ipInfo) {
        this.ipInfo.setText(ipInfo);
    }
    
    protected void drawBoard(ChessGame chessGame) {

        this.boardPanel.removeAll();
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                int x = j * this.squareLength;
                int y = i * this.squareLength;
                
                if (chessGame.board[i][j] != null) {
//                    JLabel image = chessGame.board[i][j].image;
                    Piece piece = chessGame.board[i][j];
                    JLabel image = new JLabel(imgs.get(piece.pieceType + piece.playerStr));
                    image.setSize(this.squareLength, this.squareLength);
                    image.setLocation(x, y);
                    this.boardPanel.add(image);
                }
            }
        }
        this.boardPanel.repaint();
        
    }

    

    // Variables declaration - do not modify                     
    private MyBoardPanel boardPanel;
    private javax.swing.JTextField dialogue;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JTextField ipInfo;
    private javax.swing.JButton resignButton;
    // End of variables declaration                   

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == this.resignButton) {
            this.myUserInterface.myGameInput.setCmd(2);
            this.myUserInterface.myGamePlayer.sendMessage(this.myUserInterface.myGameInput);
        }
        
    }

    private void loadImages() {
        try {
            imgs.put("BB", new ImageIcon(ImageIO.read(new File("BB.png"))));
            imgs.put("BW", new ImageIcon(ImageIO.read(new File("BW.png"))));
            imgs.put("KB", new ImageIcon(ImageIO.read(new File("KB.png"))));
            imgs.put("KW", new ImageIcon(ImageIO.read(new File("KW.png"))));
            imgs.put("KnB", new ImageIcon(ImageIO.read(new File("KnB.png"))));
            imgs.put("KnW", new ImageIcon(ImageIO.read(new File("KnW.png"))));
            imgs.put("PB", new ImageIcon(ImageIO.read(new File("PB.png"))));
            imgs.put("PW", new ImageIcon(ImageIO.read(new File("PW.png"))));
            imgs.put("QB", new ImageIcon(ImageIO.read(new File("QB.png"))));
            imgs.put("QW", new ImageIcon(ImageIO.read(new File("QW.png"))));
            imgs.put("RB", new ImageIcon(ImageIO.read(new File("RB.png"))));
            imgs.put("RW", new ImageIcon(ImageIO.read(new File("RW.png"))));
        } catch (IOException e) {
            System.out.println(e);
        }
    }
}
